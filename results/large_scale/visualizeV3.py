import pandas as pd
import plotly.graph_objects as go
import plotly.express as px

# Example data (structure similar to what you provided)
problem_files = {
    # 'knapPI_1_100_1000_1': pd.DataFrame(),
    'f1_l-d_kp_10_269': pd.DataFrame({'Optimal Solution': [295.0, 295.0, 295.0], 'Selection Implementation': ['roulette_selection', 'ranking_selection', 'tournament_selection'], 'Score_Log}),
    'f2_l-d_kp_20_878': pd.DataFrame({'Optimal Solution': [1024.0, 1024.0, 1024.0], 'Selection Implementation': ['roulette_selection', 'ranking_selection', 'tournament_selection'], 'Score_Log': [[844.0, 860.0, 861.0, 922.0, 963.0, 963.0, 963.0, 964.0, 964.0, 964.0, 964.0, 1010.0, 1010.0, 1010.0, 1010.0, 1010.0, 1010.0, 1010.0, 1010.0, 1010.0, 1010.0, 1010.0, 1010.0, 1018.0, 1018.0, 1018.0, 1018.0, 1018.0, 1018.0, 1018.0, 1018.0, 1018.0, 1018.0, 1018.0, 1018.0, 1018.0, 1018.0, 1018.0, 1018.0, 1018.0, 1018.0, 1018.0, 1018.0, 1018.0, 1018.0, 1018.0, 1018.0, 1018.0, 1018.0, 1018.0, 1018.0, 1018.0, 1018.0, 1018.0, 1018.0, 1018.0, 1018.0, 1024.0, 1024.0, 1024.0, 1024.0, 1024.0, 1024.0, 1024.0, 1024.0, 1024.0, 1024.0, 1024.0, 1024.0, 1024.0, 1024.0, 1024.0, 1024.0, 1024.0, 1024.0, 1024.0, 1024.0, 1024.0, 1024.0, 1024.0, 1024.0, 1024.0, 1024.0, 1024.0, 1024.0, 1024.0, 1024.0, 1024.0, 1024.0, 1024.0, 1024.0, 1024.0, 1024.0, 1024.0, 1024.0, 1024.0, 1024.0, 1024.0, 1024.0, 1024.0, 1024.0], [861.0, 861.0, 861.0, 861.0, 861.0, 901.0, 901.0, 901.0, 901.0, 912.0, 912.0, 912.0, 932.0, 932.0, 932.0, 1010.0, 1010.0, 1010.0, 1010.0, 1010.0, 1018.0, 1018.0, 1018.0, 1018.0, 1018.0, 1018.0, 1018.0, 1018.0, 1018.0, 1018.0, 1018.0, 1018.0, 1018.0, 1018.0, 1018.0, 1018.0, 1018.0, 1018.0, 1018.0, 1018.0, 1018.0, 1018.0, 1018.0, 1018.0, 1018.0, 1018.0, 1018.0, 1018.0, 1018.0, 1018.0, 1018.0, 1018.0, 1018.0, 1018.0, 1018.0, 1018.0, 1018.0, 1018.0, 1018.0, 1018.0, 1018.0, 1018.0, 1018.0, 1018.0, 1018.0, 1018.0, 1018.0, 1018.0, 1018.0, 1018.0, 1018.0, 1018.0, 1018.0, 1018.0, 1018.0, 1018.0, 1018.0, 1018.0, 1018.0, 1018.0, 1018.0, 1018.0, 1018.0, 1018.0, 1018.0, 1018.0, 1018.0, 1018.0, 1018.0, 1018.0, 1018.0, 1018.0, 1018.0, 1018.0, 1018.0, 1018.0, 1018.0, 1018.0, 1018.0, 1018.0, 1018.0], [878.0, 890.0, 936.0, 949.0, 996.0, 1024.0, 1024.0, 1024.0, 1024.0, 1024.0, 1024.0, 1024.0, 1024.0, 1024.0, 1024.0, 1024.0, 1024.0, 1024.0, 1024.0, 1024.0, 1024.0, 1024.0, 1024.0, 1024.0, 1024.0, 1024.0, 1024.0, 1024.0, 1024.0, 1024.0, 1024.0, 1024.0, 1024.0, 1024.0, 1024.0, 1024.0, 1024.0, 1024.0, 1024.0, 1024.0, 1024.0, 1024.0, 1024.0, 1024.0, 1024.0, 1024.0, 1024.0, 1024.0, 1024.0, 1024.0, 1024.0, 1024.0, 1024.0, 1024.0, 1024.0, 1024.0, 1024.0, 1024.0, 1024.0, 1024.0, 1024.0, 1024.0, 1024.0, 1024.0, 1024.0, 1024.0, 1024.0, 1024.0, 1024.0, 1024.0, 1024.0, 1024.0, 1024.0, 1024.0, 1024.0, 1024.0, 1024.0, 1024.0, 1024.0, 1024.0, 1024.0, 1024.0, 1024.0, 1024.0, 1024.0, 1024.0, 1024.0, 1024.0, 1024.0, 1024.0, 1024.0, 1024.0, 1024.0, 1024.0, 1024.0, 1024.0, 1024.0, 1024.0, 1024.0, 1024.0, 1024.0]]}),
    'f3_l-d_kp_4_20': pd.DataFrame({'Optimal Solution': [35.0, 35.0, 35.0], 'Selection Implementation': ['roulette_selection', 'ranking_selection', 'tournament_selection'], 'Score_Log': [[33.0, 35.0, 35.0, 35.0, 35.0, 35.0, 35.0, 35.0, 35.0, 35.0, 35.0, 35.0, 35.0, 35.0, 35.0, 35.0, 35.0, 35.0, 35.0, 35.0, 35.0, 35.0, 35.0, 35.0, 35.0, 35.0, 35.0, 35.0, 35.0, 35.0, 35.0, 35.0, 35.0, 35.0, 35.0, 35.0, 35.0, 35.0, 35.0, 35.0, 35.0, 35.0, 35.0, 35.0, 35.0, 35.0, 35.0, 35.0, 35.0, 35.0, 35.0, 35.0, 35.0, 35.0, 35.0, 35.0, 35.0, 35.0, 35.0, 35.0, 35.0, 35.0, 35.0, 35.0, 35.0, 35.0, 35.0, 35.0, 35.0, 35.0, 35.0, 35.0, 35.0, 35.0, 35.0, 35.0, 35.0, 35.0, 35.0, 35.0, 35.0, 35.0, 35.0, 35.0, 35.0, 35.0, 35.0, 35.0, 35.0, 35.0, 35.0, 35.0, 35.0, 35.0, 35.0, 35.0, 35.0, 35.0, 35.0, 35.0, 35.0], [33.0, 33.0, 33.0, 33.0, 33.0, 33.0, 33.0, 33.0, 33.0, 33.0, 33.0, 33.0, 33.0, 33.0, 33.0, 33.0, 33.0, 33.0, 33.0, 33.0, 33.0, 33.0, 33.0, 33.0, 33.0, 33.0, 35.0, 35.0, 35.0, 35.0, 35.0, 35.0, 35.0, 35.0, 35.0, 35.0, 35.0, 35.0, 35.0, 35.0, 35.0, 35.0, 35.0, 35.0, 35.0, 35.0, 35.0, 35.0, 35.0, 35.0, 35.0, 35.0, 35.0, 35.0, 35.0, 35.0, 35.0, 35.0, 35.0, 35.0, 35.0, 35.0, 35.0, 35.0, 35.0, 35.0, 35.0, 35.0, 35.0, 35.0, 35.0, 35.0, 35.0, 35.0, 35.0, 35.0, 35.0, 35.0, 35.0, 35.0, 35.0, 35.0, 35.0, 35.0, 35.0, 35.0, 35.0, 35.0, 35.0, 35.0, 35.0, 35.0, 35.0, 35.0, 35.0, 35.0, 35.0, 35.0, 35.0, 35.0, 35.0], [33.0, 35.0, 35.0, 35.0, 35.0, 35.0, 35.0, 35.0, 35.0, 35.0, 35.0, 35.0, 35.0, 35.0, 35.0, 35.0, 35.0, 35.0, 35.0, 35.0, 35.0, 35.0, 35.0, 35.0, 35.0, 35.0, 35.0, 35.0, 35.0, 35.0, 35.0, 35.0, 35.0, 35.0, 35.0, 35.0, 35.0, 35.0, 35.0, 35.0, 35.0, 35.0, 35.0, 35.0, 35.0, 35.0, 35.0, 35.0, 35.0, 35.0, 35.0, 35.0, 35.0, 35.0, 35.0, 35.0, 35.0, 35.0, 35.0, 35.0, 35.0, 35.0, 35.0, 35.0, 35.0, 35.0, 35.0, 35.0, 35.0, 35.0, 35.0, 35.0, 35.0, 35.0, 35.0, 35.0, 35.0, 35.0, 35.0, 35.0, 35.0, 35.0, 35.0, 35.0, 35.0, 35.0, 35.0, 35.0, 35.0, 35.0, 35.0, 35.0, 35.0, 35.0, 35.0, 35.0, 35.0, 35.0, 35.0, 35.0, 35.0]]}),
    'f4_l-d_kp_4_11': pd.DataFrame({'Optimal Solution': [23.0, 23.0, 23.0], 'Selection Implementation': ['roulette_selection', 'ranking_selection', 'tournament_selection'], 'Score_Log': [[16.0, 23.0, 23.0, 23.0, 23.0, 23.0, 23.0, 23.0, 23.0, 23.0, 23.0, 23.0, 23.0, 23.0, 23.0, 23.0, 23.0, 23.0, 23.0, 23.0, 23.0, 23.0, 23.0, 23.0, 23.0, 23.0, 23.0, 23.0, 23.0, 23.0, 23.0, 23.0, 23.0, 23.0, 23.0, 23.0, 23.0, 23.0, 23.0, 23.0, 23.0, 23.0, 23.0, 23.0, 23.0, 23.0, 23.0, 23.0, 23.0, 23.0, 23.0, 23.0, 23.0, 23.0, 23.0, 23.0, 23.0, 23.0, 23.0, 23.0, 23.0, 23.0, 23.0, 23.0, 23.0, 23.0, 23.0, 23.0, 23.0, 23.0, 23.0, 23.0, 23.0, 23.0, 23.0, 23.0, 23.0, 23.0, 23.0, 23.0, 23.0, 23.0, 23.0, 23.0, 23.0, 23.0, 23.0, 23.0, 23.0, 23.0, 23.0, 23.0, 23.0, 23.0, 23.0, 23.0, 23.0, 23.0, 23.0, 23.0, 23.0], [16.0, 16.0, 16.0, 16.0, 16.0, 16.0, 16.0, 22.0, 22.0, 22.0, 22.0, 22.0, 22.0, 22.0, 22.0, 22.0, 22.0, 22.0, 22.0, 22.0, 22.0, 22.0, 22.0, 22.0, 23.0, 23.0, 23.0, 23.0, 23.0, 23.0, 23.0, 23.0, 23.0, 23.0, 23.0, 23.0, 23.0, 23.0, 23.0, 23.0, 23.0, 23.0, 23.0, 23.0, 23.0, 23.0, 23.0, 23.0, 23.0, 23.0, 23.0, 23.0, 23.0, 23.0, 23.0, 23.0, 23.0, 23.0, 23.0, 23.0, 23.0, 23.0, 23.0, 23.0, 23.0, 23.0, 23.0, 23.0, 23.0, 23.0, 23.0, 23.0, 23.0, 23.0, 23.0, 23.0, 23.0, 23.0, 23.0, 23.0, 23.0, 23.0, 23.0, 23.0, 23.0, 23.0, 23.0, 23.0, 23.0, 23.0, 23.0, 23.0, 23.0, 23.0, 23.0, 23.0, 23.0, 23.0, 23.0, 23.0, 23.0], [16.0, 23.0, 23.0, 23.0, 23.0, 23.0, 23.0, 23.0, 23.0, 23.0, 23.0, 23.0, 23.0, 23.0, 23.0, 23.0, 23.0, 23.0, 23.0, 23.0, 23.0, 23.0, 23.0, 23.0, 23.0, 23.0, 23.0, 23.0, 23.0, 23.0, 23.0, 23.0, 23.0, 23.0, 23.0, 23.0, 23.0, 23.0, 23.0, 23.0, 23.0, 23.0, 23.0, 23.0, 23.0, 23.0, 23.0, 23.0, 23.0, 23.0, 23.0, 23.0, 23.0, 23.0, 23.0, 23.0, 23.0, 23.0, 23.0, 23.0, 23.0, 23.0, 23.0, 23.0, 23.0, 23.0, 23.0, 23.0, 23.0, 23.0, 23.0, 23.0, 23.0, 23.0, 23.0, 23.0, 23.0, 23.0, 23.0, 23.0, 23.0, 23.0, 23.0, 23.0, 23.0, 23.0, 23.0, 23.0, 23.0, 23.0, 23.0, 23.0, 23.0, 23.0, 23.0, 23.0, 23.0, 23.0, 23.0, 23.0, 23.0]]}),
    'f5_l-d_kp_15_375': pd.DataFrame({'Optimal Solution': [481.0694, 481.0694, 481.0694], 'Selection Implementation': ['roulette_selection', 'ranking_selection', 'tournament_selection'], 'Score_Log': [[252.30872499999998, 429.282509, 429.282509, 429.282509, 469.161046, 469.161046, 469.161046, 469.161046, 469.161046, 469.161046, 469.161046, 469.161046, 469.161046, 469.161046, 469.161046, 481.069368, 481.069368, 481.069368, 481.069368, 481.069368, 481.069368, 481.069368, 481.069368, 481.069368, 481.069368, 481.069368, 481.069368, 481.069368, 481.069368, 481.069368, 481.069368, 481.069368, 481.069368, 481.069368, 481.069368, 481.069368, 481.069368, 481.069368, 481.069368, 481.069368, 481.069368, 481.069368, 481.069368, 481.069368, 481.069368, 481.069368, 481.069368, 481.069368, 481.069368, 481.069368, 481.069368, 481.069368, 481.069368, 481.069368, 481.069368, 481.069368, 481.069368, 481.069368, 481.069368, 481.069368, 481.069368, 481.069368, 481.069368, 481.069368, 481.069368, 481.069368, 481.069368, 481.069368, 481.069368, 481.069368, 481.069368, 481.069368, 481.069368, 481.069368, 481.069368, 481.069368, 481.069368, 481.069368, 481.069368, 481.069368, 481.069368, 481.069368, 481.069368, 481.069368, 481.069368, 481.069368, 481.069368, 481.069368, 481.069368, 481.069368, 481.069368, 481.069368, 481.069368, 481.069368, 481.069368, 481.069368, 481.069368, 481.069368, 481.069368, 481.069368, 481.069368], [252.30872499999998, 252.30872499999998, 252.30872499999998, 252.30872499999998, 252.30872499999998, 323.233741, 323.233741, 323.233741, 323.233741, 323.233741, 323.233741, 323.233741, 323.233741, 345.14603, 345.14603, 345.14603, 345.14603, 345.14603, 388.915676, 388.915676, 388.915676, 388.915676, 388.915676, 388.915676, 388.915676, 388.915676, 388.915676, 388.915676, 390.591142, 390.591142, 390.591142, 392.773216, 392.773216, 392.773216, 392.773216, 392.773216, 392.773216, 392.773216, 392.773216, 392.773216, 392.773216, 392.773216, 392.773216, 392.773216, 392.773216, 392.773216, 392.773216, 392.773216, 392.773216, 392.773216, 392.773216, 392.773216, 392.773216, 392.773216, 392.773216, 399.002044, 399.002044, 399.002044, 399.002044, 399.002044, 405.319375, 405.319375, 407.251198, 407.251198, 407.251198, 407.251198, 407.251198, 410.910366, 410.910366, 410.910366, 410.910366, 410.910366, 410.910366, 410.910366, 410.910366, 410.910366, 410.910366, 410.910366, 410.910366, 410.910366, 410.910366, 410.910366, 410.910366, 410.910366, 410.910366, 410.910366, 410.910366, 410.910366, 410.910366, 410.910366, 410.910366, 410.910366, 410.910366, 410.910366, 410.910366, 410.910366, 410.910366, 410.910366, 410.910366, 410.910366, 410.910366], [252.18359899999996, 319.797357, 379.619739, 450.669881, 481.069368, 481.069368, 481.069368, 481.069368, 481.069368, 481.069368, 481.069368, 481.069368, 481.069368, 481.069368, 481.069368, 481.069368, 481.069368, 481.069368, 481.069368, 481.069368, 481.069368, 481.069368, 481.069368, 481.069368, 481.069368, 481.069368, 481.069368, 481.069368, 481.069368, 481.069368, 481.069368, 481.069368, 481.069368, 481.069368, 481.069368, 481.069368, 481.069368, 481.069368, 481.069368, 481.069368, 481.069368, 481.069368, 481.069368, 481.069368, 481.069368, 481.069368, 481.069368, 481.069368, 481.069368, 481.069368, 481.069368, 481.069368, 481.069368, 481.069368, 481.069368, 481.069368, 481.069368, 481.069368, 481.069368, 481.069368, 481.069368, 481.069368, 481.069368, 481.069368, 481.069368, 481.069368, 481.069368, 481.069368, 481.069368, 481.069368, 481.069368, 481.069368, 481.069368, 481.069368, 481.069368, 481.069368, 481.069368, 481.069368, 481.069368, 481.069368, 481.069368, 481.069368, 481.069368, 481.069368, 481.069368, 481.069368, 481.069368, 481.069368, 481.069368, 481.069368, 481.069368, 481.069368, 481.069368, 481.069368, 481.069368, 481.069368, 481.069368, 481.069368, 481.069368, 481.069368, 481.069368]]}),
    'f6_l-d_kp_10_60': pd.DataFrame({'Optimal Solution': [52.0, 52.0, 52.0], 'Selection Implementation': ['roulette_selection', 'ranking_selection', 'tournament_selection'], 'Score_Log': [[43.0, 48.0, 48.0, 49.0, 52.0, 52.0, 52.0, 52.0, 52.0, 52.0, 52.0, 52.0, 52.0, 52.0, 52.0, 52.0, 52.0, 52.0, 52.0, 52.0, 52.0, 52.0, 52.0, 52.0, 52.0, 52.0, 52.0, 52.0, 52.0, 52.0, 52.0, 52.0, 52.0, 52.0, 52.0, 52.0, 52.0, 52.0, 52.0, 52.0, 52.0, 52.0, 52.0, 52.0, 52.0, 52.0, 52.0, 52.0, 52.0, 52.0, 52.0, 52.0, 52.0, 52.0, 52.0, 52.0, 52.0, 52.0, 52.0, 52.0, 52.0, 52.0, 52.0, 52.0, 52.0, 52.0, 52.0, 52.0, 52.0, 52.0, 52.0, 52.0, 52.0, 52.0, 52.0, 52.0, 52.0, 52.0, 52.0, 52.0, 52.0, 52.0, 52.0, 52.0, 52.0, 52.0, 52.0, 52.0, 52.0, 52.0, 52.0, 52.0, 52.0, 52.0, 52.0, 52.0, 52.0, 52.0, 52.0, 52.0, 52.0], [43.0, 43.0, 43.0, 43.0, 43.0, 43.0, 43.0, 43.0, 43.0, 43.0, 43.0, 43.0, 43.0, 43.0, 43.0, 43.0, 43.0, 43.0, 43.0, 43.0, 43.0, 43.0, 43.0, 43.0, 43.0, 43.0, 43.0, 43.0, 43.0, 43.0, 43.0, 43.0, 43.0, 43.0, 43.0, 43.0, 45.0, 45.0, 45.0, 45.0, 45.0, 45.0, 45.0, 45.0, 45.0, 45.0, 45.0, 46.0, 47.0, 47.0, 47.0, 47.0, 47.0, 47.0, 47.0, 47.0, 47.0, 47.0, 47.0, 47.0, 47.0, 47.0, 47.0, 47.0, 47.0, 47.0, 47.0, 47.0, 47.0, 47.0, 47.0, 47.0, 47.0, 47.0, 47.0, 47.0, 47.0, 47.0, 47.0, 47.0, 47.0, 47.0, 47.0, 47.0, 47.0, 47.0, 47.0, 47.0, 47.0, 47.0, 47.0, 47.0, 47.0, 47.0, 47.0, 47.0, 47.0, 47.0, 47.0, 47.0, 47.0], [43.0, 48.0, 49.0, 52.0, 52.0, 52.0, 52.0, 52.0, 52.0, 52.0, 52.0, 52.0, 52.0, 52.0, 52.0, 52.0, 52.0, 52.0, 52.0, 52.0, 52.0, 52.0, 52.0, 52.0, 52.0, 52.0, 52.0, 52.0, 52.0, 52.0, 52.0, 52.0, 52.0, 52.0, 52.0, 52.0, 52.0, 52.0, 52.0, 52.0, 52.0, 52.0, 52.0, 52.0, 52.0, 52.0, 52.0, 52.0, 52.0, 52.0, 52.0, 52.0, 52.0, 52.0, 52.0, 52.0, 52.0, 52.0, 52.0, 52.0, 52.0, 52.0, 52.0, 52.0, 52.0, 52.0, 52.0, 52.0, 52.0, 52.0, 52.0, 52.0, 52.0, 52.0, 52.0, 52.0, 52.0, 52.0, 52.0, 52.0, 52.0, 52.0, 52.0, 52.0, 52.0, 52.0, 52.0, 52.0, 52.0, 52.0, 52.0, 52.0, 52.0, 52.0, 52.0, 52.0, 52.0, 52.0, 52.0, 52.0, 52.0]]}),
    'f7_l-d_kp_7_50': pd.DataFrame({'Optimal Solution': [107.0, 107.0, 107.0], 'Selection Implementation': ['roulette_selection', 'ranking_selection', 'tournament_selection'], 'Score_Log}),
    'f8_l-d_kp_23_10000': pd.DataFrame({'Optimal Solution': [9767.0, 9767.0, 9767.0], 'Selection Implementation': ['roulette_selection', 'ranking_selection', 'tournament_selection'], 'Score_Log': [[8293.0, 9756.0, 9756.0, 9756.0, 9757.0, 9757.0, 9759.0, 9759.0, 9759.0, 9759.0, 9759.0, 9759.0, 9759.0, 9759.0, 9759.0, 9759.0, 9759.0, 9759.0, 9759.0, 9759.0, 9759.0, 9759.0, 9759.0, 9759.0, 9759.0, 9759.0, 9759.0, 9759.0, 9759.0, 9759.0, 9759.0, 9759.0, 9759.0, 9759.0, 9759.0, 9759.0, 9759.0, 9759.0, 9759.0, 9759.0, 9759.0, 9759.0, 9759.0, 9759.0, 9759.0, 9759.0, 9759.0, 9759.0, 9759.0, 9759.0, 9759.0, 9759.0, 9759.0, 9759.0, 9759.0, 9759.0, 9759.0, 9759.0, 9759.0, 9759.0, 9759.0, 9759.0, 9759.0, 9759.0, 9759.0, 9759.0, 9759.0, 9759.0, 9759.0, 9759.0, 9759.0, 9759.0, 9759.0, 9759.0, 9759.0, 9759.0, 9759.0, 9759.0, 9759.0, 9759.0, 9759.0, 9759.0, 9759.0, 9759.0, 9759.0, 9759.0, 9759.0, 9759.0, 9759.0, 9759.0, 9759.0, 9759.0, 9759.0, 9759.0, 9759.0, 9759.0, 9759.0, 9759.0, 9759.0, 9759.0, 9759.0], [9269.0, 9269.0, 9742.0, 9742.0, 9745.0, 9745.0, 9745.0, 9745.0, 9745.0, 9745.0, 9745.0, 9751.0, 9751.0, 9751.0, 9751.0, 9751.0, 9751.0, 9751.0, 9751.0, 9751.0, 9751.0, 9751.0, 9751.0, 9751.0, 9751.0, 9751.0, 9751.0, 9751.0, 9751.0, 9751.0, 9751.0, 9751.0, 9751.0, 9751.0, 9751.0, 9751.0, 9751.0, 9751.0, 9751.0, 9751.0, 9751.0, 9751.0, 9751.0, 9751.0, 9751.0, 9751.0, 9751.0, 9751.0, 9751.0, 9751.0, 9760.0, 9760.0, 9760.0, 9760.0, 9760.0, 9760.0, 9760.0, 9760.0, 9760.0, 9760.0, 9760.0, 9760.0, 9760.0, 9760.0, 9760.0, 9760.0, 9760.0, 9760.0, 9760.0, 9760.0, 9760.0, 9760.0, 9760.0, 9760.0, 9760.0, 9760.0, 9760.0, 9760.0, 9760.0, 9760.0, 9760.0, 9760.0, 9760.0, 9760.0, 9760.0, 9760.0, 9760.0, 9760.0, 9760.0, 9760.0, 9764.0, 9764.0, 9764.0, 9764.0, 9764.0, 9764.0, 9764.0, 9764.0, 9764.0, 9764.0, 9764.0], [9271.0, 9743.0, 9754.0, 9757.0, 9764.0, 9764.0, 9764.0, 9764.0, 9764.0, 9764.0, 9764.0, 9764.0, 9764.0, 9766.0, 9766.0, 9766.0, 9766.0, 9766.0, 9766.0, 9766.0, 9766.0, 9766.0, 9766.0, 9766.0, 9766.0, 9766.0, 9766.0, 9766.0, 9766.0, 9766.0, 9766.0, 9766.0, 9766.0, 9766.0, 9766.0, 9766.0, 9766.0, 9766.0, 9766.0, 9766.0, 9766.0, 9766.0, 9766.0, 9766.0, 9766.0, 9766.0, 9766.0, 9766.0, 9766.0, 9766.0, 9766.0, 9766.0, 9766.0, 9766.0, 9766.0, 9766.0, 9766.0, 9766.0, 9766.0, 9766.0, 9766.0, 9766.0, 9766.0, 9766.0, 9766.0, 9766.0, 9766.0, 9766.0, 9766.0, 9766.0, 9766.0, 9766.0, 9766.0, 9766.0, 9766.0, 9766.0, 9766.0, 9766.0, 9766.0, 9766.0, 9766.0, 9766.0, 9766.0, 9766.0, 9766.0, 9766.0, 9766.0, 9766.0, 9766.0, 9766.0, 9766.0, 9766.0, 9766.0, 9766.0, 9766.0, 9767.0, 9767.0, 9767.0, 9767.0, 9767.0, 9767.0]]}),
    'f9_l-d_kp_5_80': pd.DataFrame({'Optimal Solution': [130.0, 130.0, 130.0], 'Selection Implementation': ['roulette_selection', 'ranking_selection', 'tournament_selection'], 'Score_Log}),
    'f10_l-d_kp_20_879': pd.DataFrame({'Optimal Solution': [1025.0, 1025.0, 1025.0], 'Selection Implementation': ['roulette_selection', 'ranking_selection', 'tournament_selection'], 'Score_Log': [[876.0, 876.0, 922.0, 922.0, 922.0, 922.0, 961.0, 961.0, 961.0, 961.0, 961.0, 961.0, 961.0, 961.0, 999.0, 999.0, 999.0, 999.0, 999.0, 999.0, 999.0, 999.0, 999.0, 999.0, 999.0, 999.0, 999.0, 999.0, 999.0, 999.0, 999.0, 999.0, 999.0, 999.0, 999.0, 999.0, 999.0, 999.0, 999.0, 999.0, 1005.0, 1005.0, 1005.0, 1005.0, 1005.0, 1005.0, 1005.0, 1005.0, 1005.0, 1005.0, 1005.0, 1005.0, 1005.0, 1005.0, 1005.0, 1005.0, 1005.0, 1005.0, 1005.0, 1005.0, 1005.0, 1005.0, 1005.0, 1005.0, 1005.0, 1005.0, 1005.0, 1005.0, 1005.0, 1005.0, 1005.0, 1005.0, 1005.0, 1005.0, 1005.0, 1005.0, 1005.0, 1005.0, 1005.0, 1005.0, 1005.0, 1005.0, 1005.0, 1005.0, 1005.0, 1005.0, 1005.0, 1005.0, 1005.0, 1005.0, 1005.0, 1005.0, 1005.0, 1005.0, 1005.0, 1005.0, 1005.0, 1005.0, 1005.0, 1005.0, 1005.0], [855.0, 855.0, 855.0, 855.0, 855.0, 867.0, 902.0, 902.0, 942.0, 942.0, 942.0, 942.0, 942.0, 942.0, 982.0, 982.0, 982.0, 982.0, 982.0, 982.0, 982.0, 982.0, 982.0, 982.0, 982.0, 982.0, 1017.0, 1017.0, 1017.0, 1017.0, 1017.0, 1017.0, 1017.0, 1017.0, 1017.0, 1017.0, 1017.0, 1017.0, 1017.0, 1017.0, 1025.0, 1025.0, 1025.0, 1025.0, 1025.0, 1025.0, 1025.0, 1025.0, 1025.0, 1025.0, 1025.0, 1025.0, 1025.0, 1025.0, 1025.0, 1025.0, 1025.0, 1025.0, 1025.0, 1025.0, 1025.0, 1025.0, 1025.0, 1025.0, 1025.0, 1025.0, 1025.0, 1025.0, 1025.0, 1025.0, 1025.0, 1025.0, 1025.0, 1025.0, 1025.0, 1025.0, 1025.0, 1025.0, 1025.0, 1025.0, 1025.0, 1025.0, 1025.0, 1025.0, 1025.0, 1025.0, 1025.0, 1025.0, 1025.0, 1025.0, 1025.0, 1025.0, 1025.0, 1025.0, 1025.0, 1025.0, 1025.0, 1025.0, 1025.0, 1025.0, 1025.0], [825.0, 837.0, 922.0, 994.0, 1019.0, 1025.0, 1025.0, 1025.0, 1025.0, 1025.0, 1025.0, 1025.0, 1025.0, 1025.0, 1025.0, 1025.0, 1025.0, 1025.0, 1025.0, 1025.0, 1025.0, 1025.0, 1025.0, 1025.0, 1025.0, 1025.0, 1025.0, 1025.0, 1025.0, 1025.0, 1025.0, 1025.0, 1025.0, 1025.0, 1025.0, 1025.0, 1025.0, 1025.0, 1025.0, 1025.0, 1025.0, 1025.0, 1025.0, 1025.0, 1025.0, 1025.0, 1025.0, 1025.0, 1025.0, 1025.0, 1025.0, 1025.0, 1025.0, 1025.0, 1025.0, 1025.0, 1025.0, 1025.0, 1025.0, 1025.0, 1025.0, 1025.0, 1025.0, 1025.0, 1025.0, 1025.0, 1025.0, 1025.0, 1025.0, 1025.0, 1025.0, 1025.0, 1025.0, 1025.0, 1025.0, 1025.0, 1025.0, 1025.0, 1025.0, 1025.0, 1025.0, 1025.0, 1025.0, 1025.0, 1025.0, 1025.0, 1025.0, 1025.0, 1025.0, 1025.0, 1025.0, 1025.0, 1025.0, 1025.0, 1025.0, 1025.0, 1025.0, 1025.0, 1025.0, 1025.0, 1025.0]]}),
    'knapPI_1_100_1000_1' : pd.DataFrame({'Optimal Solution': [9147.0, 9147.0, 9147.0], 'Selection Implementation': ['roulette_selection', 'ranking_selection', 'tournament_selection'], 'Score_Log': [[2515.0, 2803.0, 2803.0, 2803.0, 2803.0, 2803.0, 2803.0, 2803.0, 2803.0, 2803.0, 2803.0, 2803.0, 2803.0, 2803.0, 2803.0, 2803.0, 2803.0, 2803.0, 2803.0, 2803.0, 2803.0, 2803.0, 2803.0, 2803.0, 2803.0, 2803.0, 2803.0, 2803.0, 2803.0, 2803.0, 2803.0, 2803.0, 2803.0, 2803.0, 2803.0, 2803.0, 2803.0, 2803.0, 2803.0, 2803.0, 2803.0, 2803.0, 2803.0, 2803.0, 2803.0, 2803.0, 2803.0, 2803.0, 2803.0, 2803.0, 2803.0, 2803.0, 2803.0, 2803.0, 2803.0, 2803.0, 2803.0, 2803.0, 2803.0, 2803.0, 2803.0, 2803.0, 2803.0, 2803.0, 2803.0, 2803.0, 2803.0, 2803.0, 2803.0, 2803.0, 2803.0, 2803.0, 2803.0, 2803.0, 2803.0, 2803.0, 2803.0, 2803.0, 2803.0, 2803.0, 2803.0, 2803.0, 2803.0, 2803.0, 2803.0, 2803.0, 2803.0, 2803.0, 2803.0, 2803.0, 2803.0, 2803.0, 2803.0, 2803.0, 2803.0, 2803.0, 2803.0, 2803.0, 2803.0, 2803.0, 2803.0], [2515.0, 2515.0, 2515.0, 2515.0, 2515.0, 2515.0, 2515.0, 2515.0, 2515.0, 2515.0, 2515.0, 2515.0, 2515.0, 2515.0, 2515.0, 2515.0, 2515.0, 2515.0, 2515.0, 2515.0, 2515.0, 2515.0, 2515.0, 2515.0, 2515.0, 2515.0, 2515.0, 2515.0, 2515.0, 2515.0, 2515.0, 2515.0, 2515.0, 2515.0, 2515.0, 2515.0, 2515.0, 2515.0, 2515.0, 2515.0, 2515.0, 2515.0, 2515.0, 2515.0, 2515.0, 2515.0, 2515.0, 2515.0, 2515.0, 2515.0, 2515.0, 2515.0, 2515.0, 2515.0, 2515.0, 2515.0, 2515.0, 2515.0, 2515.0, 2515.0, 2515.0, 2515.0, 2515.0, 2515.0, 2515.0, 2515.0, 2515.0, 2515.0, 2515.0, 2515.0, 2515.0, 2515.0, 2515.0, 2515.0, 2515.0, 2515.0, 2515.0, 2515.0, 2515.0, 2515.0, 2515.0, 2515.0, 2515.0, 2515.0, 2515.0, 2515.0, 2515.0, 2515.0, 2515.0, 2515.0, 2515.0, 2515.0, 2515.0, 2515.0, 2515.0, 2515.0, 2515.0, 2515.0, 2515.0, 2515.0, 2515.0], [2515.0, 2515.0, 2515.0, 2515.0, 2515.0, 2515.0, 2515.0, 2515.0, 2515.0, 2515.0, 2515.0, 2515.0, 2515.0, 2515.0, 2515.0, 2515.0, 2515.0, 2515.0, 2515.0, 2515.0, 2515.0, 2515.0, 2515.0, 2515.0, 2515.0, 2515.0, 2515.0, 2515.0, 2515.0, 2515.0, 2515.0, 2515.0, 2515.0, 2515.0, 2515.0, 2515.0, 2515.0, 2515.0, 2515.0, 2515.0, 2515.0, 2515.0, 2515.0, 2515.0, 2515.0, 2515.0, 2515.0, 2515.0, 2515.0, 2515.0, 2515.0, 2515.0, 2515.0, 2515.0, 2515.0, 2515.0, 2515.0, 2515.0, 2515.0, 2515.0, 2515.0, 2515.0, 2515.0, 2515.0, 2515.0, 2515.0, 2515.0, 2515.0, 2515.0, 2515.0, 2515.0, 2515.0, 2515.0, 2515.0, 2515.0, 2515.0, 2515.0, 2515.0, 2515.0, 2515.0, 2515.0, 2515.0, 2515.0, 2515.0, 2515.0, 2515.0, 2515.0, 2515.0, 2515.0, 2515.0, 2515.0, 2515.0, 2515.0, 2515.0, 2515.0, 2515.0, 2515.0, 2515.0, 2515.0, 2515.0, 2515.0]]}),
    'knapPI_1_200_1000_1' : pd.DataFrame({'Optimal Solution': [11238.0, 11238.0, 11238.0], 'Selection Implementation': ['roulette_selection', 'ranking_selection', 'tournament_selection'], 'Score_Log}),
    'knapPI_1_500_1000_1' : pd.DataFrame({'Optimal Solution': [28857.0, 28857.0, 28857.0], 'Selection Implementation': ['roulette_selection', 'ranking_selection', 'tournament_selection'], 'Score_Log}),
    'knapPI_1_1000_1000_1' : pd.DataFrame({'Optimal Solution': [54503.0, 54503.0, 54503.0], 'Selection Implementation': ['roulette_selection', 'ranking_selection', 'tournament_selection'], 'Score_Log}),
    'knapPI_1_2000_1000_1' : pd.DataFrame({'Optimal Solution': [110625.0, 110625.0, 110625.0], 'Selection Implementation': ['roulette_selection', 'ranking_selection', 'tournament_selection'], 'Score_Log}),
    'knapPI_1_5000_1000_1' : pd.DataFrame({'Optimal Solution': [276457.0, 276457.0, 276457.0], 'Selection Implementation': ['roulette_selection', 'ranking_selection', 'tournament_selection'], 'Score_Log}),
    'knapPI_1_10000_1000_1' : pd.DataFrame({'Optimal Solution': [563647.0, 563647.0, 563647.0], 'Selection Implementation': ['roulette_selection', 'ranking_selection', 'tournament_selection'], 'Score_Log}),
    'knapPI_2_100_1000_1' : pd.DataFrame({'Optimal Solution': [1514.0, 1514.0, 1514.0], 'Selection Implementation': ['roulette_selection', 'ranking_selection', 'tournament_selection'], 'Score_Log}),
    'knapPI_2_200_1000_1' : pd.DataFrame({'Optimal Solution': [1634.0, 1634.0, 1634.0], 'Selection Implementation': ['roulette_selection', 'ranking_selection', 'tournament_selection'], 'Score_Log}),
    'knapPI_2_500_1000_1' : pd.DataFrame({'Optimal Solution': [4566.0, 4566.0, 4566.0], 'Selection Implementation': ['roulette_selection', 'ranking_selection', 'tournament_selection'], 'Score_Log}),
    'knapPI_2_1000_1000_1' : pd.DataFrame({'Optimal Solution': [9052.0, 9052.0, 9052.0], 'Selection Implementation': ['roulette_selection', 'ranking_selection', 'tournament_selection'], 'Score_Log}),
    'knapPI_2_2000_1000_1' : pd.DataFrame({'Optimal Solution': [18051.0, 18051.0, 18051.0], 'Selection Implementation': ['roulette_selection', 'ranking_selection', 'tournament_selection'], 'Score_Log})
}


# Creating a line plot for each configuration
fig = go.Figure()

# Generate traces for each configuration in each problem file
traces = []
trace_visibility = {}  # To track the visibility of each trace per problem
for problem_name, df in problem_files.items():
    optimal_solution_value = df['Optimal Solution'].iloc[0]

    trace_visibility[problem_name] = []
    trace = go.Scatter(
        x=list(range(len(df['Score_Log'].iloc[0]))),  # Assume all Score_Log lists are of the same length
        y=[optimal_solution_value] * len(df['Score_Log'].iloc[0]),
        mode='lines',
        name=f"{problem_name} Optimal Solution",
        line=dict(dash='dash', color='black'),
        visible=False
    )
    traces.append(trace)
    trace_visibility[problem_name].append(trace)
    fig.add_trace(trace)
    for i, row in df.iterrows():
        trace = go.Scatter(
            x=list(range(len(row['Score_Log']))),
            y=row['Score_Log'],
            mode='lines',
            name=f"{problem_name} | Selection Implementation: {row['Selection Implementation']}",
            visible=False  # Initially set all traces to invisible
        )
        traces.append(trace)
        trace_visibility[problem_name].append(trace)
        fig.add_trace(trace)

# Set initial visibility of traces for the first problem file
initial_file = list(problem_files.keys())[0]
for trace in trace_visibility[initial_file]:
    trace.visible = True


# Create a dropdown menu for selecting problem files
file_dropdown = [
    {
        "label": problem_name,
        "method": "update",
        "args": [
            {"visible": [trace in trace_visibility[problem_name] for trace in traces]}
        ]
    }
    for problem_name in problem_files.keys()
]

# Add update menus for checkboxes and dropdown
fig.update_layout(
    title="Genetic Algorithm Score Evolution",
    xaxis_title="Generations",
    yaxis_title="Score",
    updatemenus=[
        {
            "buttons": file_dropdown,
            "type": "dropdown",
            "direction": "down",
            "showactive": True,
            "x": 0.17,
            "xanchor": "left",
            "y": 1.15,
            "yanchor": "top"
        }
    ]
)
fig.write_html("genetic_algorithm_results.html", full_html=True)
print("Exported html")
fig.show()